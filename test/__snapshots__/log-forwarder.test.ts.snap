// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot Log Forwarder Stack By Distribution XXXXXXXXXXXXX: log-forwarder-cd-XXXXXXXXXXXXX 1`] = `
{
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "a524840909b73225567052baa4f50f81f3f2444186a5011d26e441ac674adb81.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    bucket = props["BucketName"]
    notification_configuration = props["NotificationConfiguration"]
    request_type = event["RequestType"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudFrontCustomResourceA6D1F3F6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
      ],
      "Properties": {
        "Create": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontCustomResourceCustomResourcePolicyC1DB161A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudfront:GetDistributionConfig",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LambdaEventBridgeRuleAllowEventRulelogforwardercdXXXXXXXXXXXXXLambdaFunctionF4A05967E013FE60": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LambdaEventBridgeRuleC6F28175",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaEventBridgeRuleC6F28175": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        ".",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Bucket",
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": {
                    "Fn::GetAtt": [
                      "CloudFrontCustomResourceA6D1F3F6",
                      "DistributionConfig.Logging.Prefix",
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction9233991D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LambdaFunction9233991D": {
      "DependsOn": [
        "LambdaRole00CCBAA4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "48921a00bac6b8539342c32036c32e9cfecd4206848cd046ec507f7b01352206.zip",
        },
        "Description": "Lambda Function which takes CloudFront logs from S3, and writes them to a CloudWatch Log group defined in env variables.",
        "Environment": {
          "Variables": {
            "LOG_GROUP_NAME": "cloudfront/XXXXXXXXXXXXX",
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole00CCBAA4",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionInvokePermission24E51DF5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      ".",
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCustomResourceA6D1F3F6",
                          "DistributionConfig.Logging.Bucket",
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaLoggingBucketNotificationsA4B7B7ED": {
      "Properties": {
        "BucketName": {
          "Fn::Select": [
            0,
            {
              "Fn::Split": [
                ".",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCustomResourceA6D1F3F6",
                    "DistributionConfig.Logging.Bucket",
                  ],
                },
              ],
            },
          ],
        },
        "Managed": false,
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {},
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "LambdaRole00CCBAA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::Split": [
                                ".",
                                {
                                  "Fn::GetAtt": [
                                    "CloudFrontCustomResourceA6D1F3F6",
                                    "DistributionConfig.Logging.Bucket",
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        "/",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Prefix",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "root",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogGroupCustomResource1B113AA6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogGroupCustomResourceCustomResourcePolicy4F969346",
      ],
      "Properties": {
        "Create": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "LogGroupCustomResourceCustomResourcePolicy4F969346": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogGroupCustomResourceCustomResourcePolicy4F969346",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`Snapshot Log Forwarder Stack By Distribution XXXXXXXXXXXXX: log-forwarder-cd-XXXXXXXXXXXXX 2`] = `
{
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "a524840909b73225567052baa4f50f81f3f2444186a5011d26e441ac674adb81.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    bucket = props["BucketName"]
    notification_configuration = props["NotificationConfiguration"]
    request_type = event["RequestType"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudFrontCustomResourceA6D1F3F6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
      ],
      "Properties": {
        "Create": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontCustomResourceCustomResourcePolicyC1DB161A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudfront:GetDistributionConfig",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LambdaEventBridgeRuleAllowEventRulelogforwardercdXXXXXXXXXXXXXLambdaFunctionF4A05967E013FE60": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LambdaEventBridgeRuleC6F28175",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaEventBridgeRuleC6F28175": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        ".",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Bucket",
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": {
                    "Fn::GetAtt": [
                      "CloudFrontCustomResourceA6D1F3F6",
                      "DistributionConfig.Logging.Prefix",
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction9233991D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LambdaFunction9233991D": {
      "DependsOn": [
        "LambdaRole00CCBAA4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "48921a00bac6b8539342c32036c32e9cfecd4206848cd046ec507f7b01352206.zip",
        },
        "Description": "Lambda Function which takes CloudFront logs from S3, and writes them to a CloudWatch Log group defined in env variables.",
        "Environment": {
          "Variables": {
            "LOG_GROUP_NAME": "cloudfront/XXXXXXXXXXXXX",
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole00CCBAA4",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionInvokePermission24E51DF5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      ".",
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCustomResourceA6D1F3F6",
                          "DistributionConfig.Logging.Bucket",
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaLoggingBucketNotificationsA4B7B7ED": {
      "Properties": {
        "BucketName": {
          "Fn::Select": [
            0,
            {
              "Fn::Split": [
                ".",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCustomResourceA6D1F3F6",
                    "DistributionConfig.Logging.Bucket",
                  ],
                },
              ],
            },
          ],
        },
        "Managed": false,
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {},
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "LambdaRole00CCBAA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::Split": [
                                ".",
                                {
                                  "Fn::GetAtt": [
                                    "CloudFrontCustomResourceA6D1F3F6",
                                    "DistributionConfig.Logging.Bucket",
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        "/",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Prefix",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "root",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogGroupCustomResource1B113AA6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogGroupCustomResourceCustomResourcePolicy4F969346",
      ],
      "Properties": {
        "Create": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "LogGroupCustomResourceCustomResourcePolicy4F969346": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogGroupCustomResourceCustomResourcePolicy4F969346",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`Snapshot Log Forwarder Stack By Distribution XXXXXXXXXXXXX: log-forwarder-cd-XXXXXXXXXXXXX 3`] = `
{
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "a524840909b73225567052baa4f50f81f3f2444186a5011d26e441ac674adb81.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    bucket = props["BucketName"]
    notification_configuration = props["NotificationConfiguration"]
    request_type = event["RequestType"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudFrontCustomResourceA6D1F3F6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
      ],
      "Properties": {
        "Create": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontCustomResourceCustomResourcePolicyC1DB161A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudfront:GetDistributionConfig",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LambdaEventBridgeRuleAllowEventRulelogforwardercdXXXXXXXXXXXXXLambdaFunctionF4A05967E013FE60": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LambdaEventBridgeRuleC6F28175",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaEventBridgeRuleC6F28175": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        ".",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Bucket",
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": {
                    "Fn::GetAtt": [
                      "CloudFrontCustomResourceA6D1F3F6",
                      "DistributionConfig.Logging.Prefix",
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction9233991D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LambdaFunction9233991D": {
      "DependsOn": [
        "LambdaRole00CCBAA4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "48921a00bac6b8539342c32036c32e9cfecd4206848cd046ec507f7b01352206.zip",
        },
        "Description": "Lambda Function which takes CloudFront logs from S3, and writes them to a CloudWatch Log group defined in env variables.",
        "Environment": {
          "Variables": {
            "LOG_GROUP_NAME": "cloudfront/XXXXXXXXXXXXX",
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole00CCBAA4",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionInvokePermission24E51DF5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      ".",
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCustomResourceA6D1F3F6",
                          "DistributionConfig.Logging.Bucket",
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaLoggingBucketNotificationsA4B7B7ED": {
      "Properties": {
        "BucketName": {
          "Fn::Select": [
            0,
            {
              "Fn::Split": [
                ".",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCustomResourceA6D1F3F6",
                    "DistributionConfig.Logging.Bucket",
                  ],
                },
              ],
            },
          ],
        },
        "Managed": false,
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {},
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "LambdaRole00CCBAA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::Split": [
                                ".",
                                {
                                  "Fn::GetAtt": [
                                    "CloudFrontCustomResourceA6D1F3F6",
                                    "DistributionConfig.Logging.Bucket",
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        "/",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Prefix",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "root",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogGroupCustomResource1B113AA6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogGroupCustomResourceCustomResourcePolicy4F969346",
      ],
      "Properties": {
        "Create": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "LogGroupCustomResourceCustomResourcePolicy4F969346": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogGroupCustomResourceCustomResourcePolicy4F969346",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`Snapshot Log Forwarder Stack By Distribution XXXXXXXXXXXXX: log-forwarder-cd-XXXXXXXXXXXXX 4`] = `
{
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "a524840909b73225567052baa4f50f81f3f2444186a5011d26e441ac674adb81.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    bucket = props["BucketName"]
    notification_configuration = props["NotificationConfiguration"]
    request_type = event["RequestType"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "s3:GetBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudFrontCustomResourceA6D1F3F6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
      ],
      "Properties": {
        "Create": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudFront","action":"getDistributionConfig","parameters":{"Id":"XXXXXXXXXXXXX"},"outputPaths":["DistributionConfig.Logging"],"physicalResourceId":{"id":"XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontCustomResourceCustomResourcePolicyC1DB161A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudfront:GetDistributionConfig",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontCustomResourceCustomResourcePolicyC1DB161A",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LambdaEventBridgeRuleAllowEventRulelogforwardercdXXXXXXXXXXXXXLambdaFunctionF4A05967E013FE60": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LambdaEventBridgeRuleC6F28175",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaEventBridgeRuleC6F28175": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        ".",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Bucket",
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": {
                    "Fn::GetAtt": [
                      "CloudFrontCustomResourceA6D1F3F6",
                      "DistributionConfig.Logging.Prefix",
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction9233991D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LambdaFunction9233991D": {
      "DependsOn": [
        "LambdaRole00CCBAA4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-ap-southeast-2",
          "S3Key": "48921a00bac6b8539342c32036c32e9cfecd4206848cd046ec507f7b01352206.zip",
        },
        "Description": "Lambda Function which takes CloudFront logs from S3, and writes them to a CloudWatch Log group defined in env variables.",
        "Environment": {
          "Variables": {
            "LOG_GROUP_NAME": "cloudfront/XXXXXXXXXXXXX",
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole00CCBAA4",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaFunctionInvokePermission24E51DF5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction9233991D",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":s3:::",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      ".",
                      {
                        "Fn::GetAtt": [
                          "CloudFrontCustomResourceA6D1F3F6",
                          "DistributionConfig.Logging.Bucket",
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LambdaLoggingBucketNotificationsA4B7B7ED": {
      "Properties": {
        "BucketName": {
          "Fn::Select": [
            0,
            {
              "Fn::Split": [
                ".",
                {
                  "Fn::GetAtt": [
                    "CloudFrontCustomResourceA6D1F3F6",
                    "DistributionConfig.Logging.Bucket",
                  ],
                },
              ],
            },
          ],
        },
        "Managed": false,
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {},
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "LambdaRole00CCBAA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:GetObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::Split": [
                                ".",
                                {
                                  "Fn::GetAtt": [
                                    "CloudFrontCustomResourceA6D1F3F6",
                                    "DistributionConfig.Logging.Bucket",
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        "/",
                        {
                          "Fn::GetAtt": [
                            "CloudFrontCustomResourceA6D1F3F6",
                            "DistributionConfig.Logging.Prefix",
                          ],
                        },
                        "*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "root",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogGroupCustomResource1B113AA6": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogGroupCustomResourceCustomResourcePolicy4F969346",
      ],
      "Properties": {
        "Create": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": "{"service":"CloudWatchLogs","action":"createLogGroup","parameters":{"logGroupName":"cloudfront/XXXXXXXXXXXXX"},"ignoreErrorCodesMatching":"ResourceAlreadyExistsException","physicalResourceId":{"id":"cloudfront/XXXXXXXXXXXXX"}}",
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "LogGroupCustomResourceCustomResourcePolicy4F969346": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogGroupCustomResourceCustomResourcePolicy4F969346",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
